---
# tasks file for grafana
-
  name: Update and Upgrade System
  apt:
    update_cache: yes
    upgrade: yes
-
  name: Install Dependancies
  apt:
    name: "{{packages}}"
    state: present
-
  name: Get Loki From GitHub
  unarchive:
    remote_src:  yes
    src: "{{loki_latest_url}}"
    dest: /usr/local/bin
-
  name: Rename binary
  command: "mv /usr/local/bin/loki-linux-amd64 /usr/local/bin/loki"
-
  name: Set executable on Loki binary
  file:
    mode: "755"
    path: /usr/local/bin/loki
- 
  name: Create Loki YAML config file
  template:
    src: loki_conf.j2
    dest: /usr/local/bin/loki_conf.yml
-
  name: Create Loki Service
  template:
    src: loki_service.j2
    dest: /etc/systemd/system/loki.service
-
  name: Add Grafana GPG key
  shell: 
    cmd: "wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -"
    executable: /bin/bash
    warn: no
-
  name: Add Grafana repo
  shell: 
    cmd: 'echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list'
    executable: /bin/bash
    warn: no
-
  name: Install Grafana
  apt:
    update_cache: yes
    name: grafana
    state: present
-
  name: Copy Grafana Database File
  copy:
    src: grafana.db
    dest: /var/lib/grafana/grafana.db
-
  name: Set permissions on Grafana Database File
  file:
    path: /var/lib/grafana/grafana.db
    owner: grafana
    group: grafana
    mode: '0640'
-
  name: Enable Grafana public dashboard
  lineinfile:
    path: /etc/grafana/grafana.ini
    regexp: auth.anonymous
    insertafter: ^[auth.anonymous]
    line: |
      [auth.anonymous]
      enabled = true
      org_name = PUBLIC
      org_role = Viewer
-
  name: Enable & Start Loki & Grafana Services
  systemd:
    daemon_reload: yes
    enabled: yes
    state: started
    name: "{{item}}"
  loop:
    - grafana-server
    - loki.service
-
  name: Add Influxdata Key
  shell:
    cmd: 'curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -'
    executable: /bin/bash
    warn: no
-
  name: Add Influxdata Repo
  shell:
    cmd: 'source /etc/lsb-release && echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | tee /etc/apt/sources.list.d/influxdb.list'
    executable: /bin/bash
    warn: no
-
  name: Install InfluxDB
  apt:
    update_cache: yes
    name: influxdb
    state: present
-
  name: Enable & Start InfluxDB service
  systemd:
      daemon_reload: yes
      enabled: yes
      state: started
      name: influxdb
-
  name: Install Python InfluxDB module
  pip:
    name: influxdb
    state: present
-
  name: Create New InfluxDB Database
  community.general.influxdb_database:
      hostname: "localhost"
      database_name: "{{influxdb_database_name}}"
-
  name: Create New InfluxDB User
  community.general.influxdb_user:
    user_name: "{{influxdb_username}}"
    user_password: "{{influxdb_password}}"
- 
  name: Create Prometheus Dirs
  file:
    state: directory
    path: "{{item}}"
    owner: ubuntu
  loop:
    - /etc/prometheus
    - /var/lib/prometheus
    - /tmp/prometheus
-
  name: Get Prometheus Server
  unarchive:
    remote_src:  yes
    src: "{{prometheus_server_url}}"
    dest: /tmp/prometheus
    list_files: yes
  register: prom_folder
-
  name: Set Prometheus Binaries
  copy:
    src: "{{item}}"
    dest: /usr/local/bin
    remote_src: yes
  loop:
    - "/tmp/prometheus/{{prom_folder.files[0]}}prometheus"
    - "/tmp/prometheus/{{prom_folder.files[0]}}promtool"
-
  name: Set Prometheus binaries as executables
  file:
    mode: "755"
    path: "{{item}}"
  loop:
    - /usr/local/bin/prometheus
    - /usr/local/bin/promtool
-
  name: Set Prometheus Web Templates
  copy:
    src: "{{item}}"
    dest: /etc/prometheus/
    owner: ubuntu
    remote_src: yes
  loop:
    - "/tmp/prometheus/{{prom_folder.files[0]}}consoles"
    - "/tmp/prometheus/{{prom_folder.files[0]}}console_libraries"
-
  name: Cleanup Prometheus Files
  file:
    state: absent
    path: /tmp/prometheus
- 
  name: Create Prometheus Config File
  template:
    src: prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
- 
  name: Create Prometheus Service
  template:
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
-
  name: Enable & Start Prometheus service
  systemd:
    daemon_reload: yes
    enabled: yes
    state: started
    name: prometheus.service